generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          String?   @default("user")
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// ========================================
// Í∞úÎ∞úÎÖ∏Ìä∏ (üî• isPublished Ï∂îÍ∞Ä)
// ========================================
model DevelopNote {
  id              String   @id @default(cuid())
  noteId          Int      @unique
  title           String?
  mainCategory    String?
  subCategory     Json?
  content         Json?
  level           String   @default("BEGINNER")
  
  // üî• Ïã†Í∑ú ÌïÑÎìú
  isPublished     Boolean  @default(false)
  metaTitle       String?
  metaDescription String?
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("developNote")
  @@index([isPublished])
  @@index([mainCategory])
}

// ========================================
// ÌîÑÎ°úÏ†ùÌä∏ (üî• Ïã†Í∑ú - App ÎåÄÏ≤¥)
// ========================================
model Project {
  id          String       @id @default(cuid())
  name        String       @unique
  title       String
  description String       @db.Text
  coverImage  String?
  appLink     String?
  
  status      String       @default("in-progress")
  progress    Int          @default(0)
  type        String
  databaseId  String?
  
  tags        ProjectTag[]
  logs        ProjectLog[]
  revenues    Revenue[]
  
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@map("projects")
  @@index([status])
  @@index([type])
}

model ProjectTag {
  id        String  @id @default(cuid())
  name      String
  color     String
  projectId String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("project_tags")
}

model ProjectLog {
  id        String   @id @default(cuid())
  projectId String
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  title     String
  content   String   @db.Text
  logType   String
  noteId    Int?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("project_logs")
  @@index([projectId])
  @@index([noteId])
}

model Revenue {
  id        String   @id @default(cuid())
  projectId String
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  month     String
  adsense   Int      @default(0)
  inapp     Int      @default(0)
  total     Int      @default(0)
  
  dau       Int?
  mau       Int?
  downloads Int?
  retention Float?
  notes     String?  @db.Text
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("revenues")
  @@unique([projectId, month])
  @@index([month])
}

// ========================================
// ÎπÑÍ∞úÎ∞úÏûê Ïù¥ÏïºÍ∏∞ (üî• Ïã†Í∑ú)
// ========================================
model Story {
  id              String   @id @default(cuid())
  slug            String   @unique
  title           String
  content         String   @db.Text
  excerpt         String?
  
  category        String
  tags            String[]
  isPublished     Boolean  @default(true)
  
  metaTitle       String?
  metaDescription String?
  viewCount       Int      @default(0)
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("stories")
  @@index([category])
  @@index([isPublished])
}

// ========================================
// Í∏∞Ï°¥ Î™®Îç∏ (Ïú†ÏßÄ)
// ========================================
model Post {
  id         String    @id @default(uuid())
  listNumber Int
  writer     String
  email      String
  title      String
  content    String
  createdAt  DateTime  @default(now()) @map("created_at")
  appName    String
  postType   String
  comments   Comment[]

  @@map("posts")
  @@index([appName, postType])
}

model Comment {
  id        String   @id @default(uuid())
  writer    String
  email     String
  content   String
  createdAt DateTime @default(now()) @map("created_at")
  postId    String   @map("post_id")
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  replies   Reply[]

  @@map("comments")
}

model Reply {
  id        String   @id @default(uuid())
  writer    String
  email     String
  content   String
  createdAt DateTime @default(now()) @map("created_at")
  commentId String   @map("comment_id")
  mentionTo String?
  comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@map("replies")
}

model App {
  id          String   @id @default(cuid())
  name        String   @unique
  title       String
  description String   @db.Text
  appLink     String
  coverImage  String?
  tags        Tag[]
  databaseId  String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Tag {
  id      String  @id @default(cuid())
  name    String
  color   String
  appId   String
  app     App     @relation(fields: [appId], references: [id], onDelete: Cascade)

  @@unique([appId, name])
}

model DailyVisitorCount {
  id    String @id @default(cuid())
  date  String @unique @map("visit_date")
  count Int    @default(0)

  @@map("daily_visitor_counts")
}

model TotalVisitorCount {
  id         String @id @default("singleton")
  totalCount Int    @default(0) @map("total_count")

  @@map("total_visitor_counts")
}