generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          String?   @default("user")
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model DevelopNote {
  id              String   @id @default(cuid())
  noteId          Int      @unique
  title           String?
  content         Json?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  mainCategory    String?
  subCategory     Json?
  level           String   @default("BEGINNER")
  isPublished     Boolean  @default(false)
  metaDescription String?
  metaTitle       String?

  @@index([isPublished])
  @@index([mainCategory])
  @@map("developNote")
}

model Project {
  id          String       @id @default(cuid())
  name        String       @unique
  title       String
  description String
  coverImage  String?
  appLink     String?
  status      String       @default("in-progress")
  progress    Int          @default(0)
  type        String
  databaseId  String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  logs        ProjectLog[]
  tags        ProjectTag[]
  revenues    Revenue[]

  @@index([status])
  @@index([type])
  @@map("projects")
}

model ProjectTag {
  id        String  @id @default(cuid())
  name      String
  color     String
  projectId String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("project_tags")
}

model ProjectLog {
  id        String   @id @default(cuid())
  projectId String
  title     String
  content   String
  logType   String
  noteId    Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId])
  @@index([noteId])
  @@map("project_logs")
}

model Revenue {
  id        String   @id @default(cuid())
  projectId String
  month     String
  adsense   Int      @default(0)
  inapp     Int      @default(0)
  total     Int      @default(0)
  dau       Int?
  mau       Int?
  downloads Int?
  retention Float?
  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([projectId, month])
  @@index([month])
  @@map("revenues")
}

model Story {
  id              String   @id @default(cuid())
  slug            String   @unique
  title           String
  content         String
  excerpt         String?
  category        String
  tags            String[]
  isPublished     Boolean  @default(true)
  metaTitle       String?
  metaDescription String?
  viewCount       Int      @default(0)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([category])
  @@index([isPublished])
  @@map("stories")
}

model Post {
  id         String    @id @default(uuid())
  listNumber Int
  writer     String
  title      String
  content    String
  createdAt  DateTime  @default(now()) @map("created_at")
  appName    String
  postType   String
  email      String
  comments   Comment[]

  @@index([appName, postType])
  @@map("posts")
}

model Comment {
  id        String   @id @default(uuid())
  writer    String
  content   String
  createdAt DateTime @default(now()) @map("created_at")
  postId    String   @map("post_id")
  email     String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  replies   Reply[]

  @@map("comments")
}

model Reply {
  id        String   @id @default(uuid())
  writer    String
  content   String
  createdAt DateTime @default(now()) @map("created_at")
  commentId String   @map("comment_id")
  email     String
  mentionTo String?
  comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@map("replies")
}

model App {
  id          String   @id @default(cuid())
  name        String   @unique
  title       String
  description String
  appLink     String
  coverImage  String?
  databaseId  String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  tags        Tag[]
}

model Tag {
  id    String @id @default(cuid())
  name  String
  color String
  appId String
  app   App    @relation(fields: [appId], references: [id], onDelete: Cascade)

  @@unique([appId, name])
}

model DailyVisitorCount {
  id    String @id @default(cuid())
  date  String @unique @map("visit_date")
  count Int    @default(0)

  @@map("daily_visitor_counts")
}

model TotalVisitorCount {
  id         String @id @default("singleton")
  totalCount Int    @default(0) @map("total_count")

  @@map("total_visitor_counts")
}

model NoteCategory {
  id          String   @id @default(cuid())
  slug        String   @unique
  name        String
  description String?
  icon        String?
  order       Int      @default(0)
  isPublished Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([isPublished, order])
  @@map("note_categories")
}
